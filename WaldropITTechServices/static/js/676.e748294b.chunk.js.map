{"version":3,"file":"static/js/676.e748294b.chunk.js","mappings":"6LAWA,MAAMA,EAAyB,CAC7BC,KAAM,GACNC,MAAO,GACPC,QAAS,ICZI,SAASC,EAASC,GAC/B,IAAIC,EAAS,CAAC,EAad,OAXKD,EAAOJ,OACVK,EAAOL,KAAO,oBAEXI,EAAOH,MAEA,eAAeK,KAAKF,EAAOH,SACrCI,EAAOJ,MAAQ,4BAFfI,EAAOJ,MAAQ,4BAIZG,EAAOF,UACVG,EAAOH,QAAU,uBAEZG,CACT,C,qBCfO,MAAME,GAAUC,EAAAA,EAAAA,IAAO,IAAI;;EAIrBC,GAAYD,EAAAA,EAAAA,IAAO,MAAM;;;EAKzBE,GAAcF,EAAAA,EAAAA,IAAO,MAAM;;;eCFxC,MAWA,GAAeG,EAAAA,EAAAA,IAAf,EAXcC,IAAmC,IAAlC,MAAEC,EAAK,QAAEC,EAAO,EAAEC,GAAUH,EACzC,OACEI,EAAAA,EAAAA,MAACP,EAAS,CAAAQ,SAAA,EACRC,EAAAA,EAAAA,KAAA,MAAAD,SAAKF,EAAEF,MACPK,EAAAA,EAAAA,KAACR,EAAW,CAAAO,UACVC,EAAAA,EAAAA,KAACX,EAAO,CAAAU,SAAEF,EAAED,SAEJ,ICdHL,GAAYD,EAAAA,EAAAA,IAAO,MAAM;;;;EAMzBW,GAAcX,EAAAA,EAAAA,IAAO,QAAQ;;ECN7BY,GAAkBZ,EAAAA,EAAAA,IAAO,MAAM;;;;;EAO/Ba,GAAiBb,EAAAA,EAAAA,IAAO,WAAW;;;;EAMnCc,GAAQd,EAAAA,EAAAA,IAAO,QAAQ;;;;ECEpC,GAAeG,EAAAA,EAAAA,IAAf,EAZcC,IAAA,IAAC,KAAEZ,EAAI,YAAEuB,EAAW,SAAEC,EAAQ,EAAET,GAAeH,EAAA,OAC3DI,EAAAA,EAAAA,MAACP,EAAS,CAAAQ,SAAA,EACRC,EAAAA,EAAAA,KAACI,EAAK,CAACG,QAASzB,EAAKiB,SAAEF,EAAEf,MACzBkB,EAAAA,EAAAA,KAACC,EAAW,CACVI,YAAaR,EAAEQ,GACfvB,KAAMA,EACN0B,GAAI1B,EACJwB,SAAUA,MAEF,ICEd,GAAeb,EAAAA,EAAAA,IAAf,EAZiBC,IAAA,IAAC,KAAEZ,EAAI,YAAEuB,EAAW,SAAEC,EAAQ,EAAET,GAAeH,EAAA,OAC9DI,EAAAA,EAAAA,MAACI,EAAe,CAAAH,SAAA,EACdC,EAAAA,EAAAA,KAACI,EAAK,CAACG,QAASzB,EAAKiB,SAAEF,EAAEf,MACzBkB,EAAAA,EAAAA,KAACG,EAAc,CACbE,YAAaR,EAAEQ,GACfG,GAAI1B,EACJA,KAAMA,EACNwB,SAAUA,MAEI,ICXPG,GAAmBnB,EAAAA,EAAAA,IAAO,MAAM;;;;;;EAQhCoB,GAAYpB,EAAAA,EAAAA,IAAO,OAAO;;;;;;;;EAU1BqB,GAAOrB,EAAAA,EAAAA,IAAO,OAAO;;;;;;EAQrBsB,GAAkBtB,EAAAA,EAAAA,IAAO,MAAM;;;;;;;EC2C5C,GAAeG,EAAAA,EAAAA,IAAf,EA3DgBC,IAA8C,IAA7C,MAAEC,EAAK,QAAEC,EAAO,GAAEY,EAAE,EAAEX,GAAiBH,EACtD,MAAM,OAAER,EAAM,OAAEC,EAAM,aAAE0B,EAAY,aAAEC,GTIhB7B,KACtB,MAAO8B,EAAWC,IAAgBC,EAAAA,EAAAA,UAG/B,CACD/B,OAAQ,IAAKL,GACbM,OAAQ,IAAKN,KAuCf,MAAO,CACLgC,aAlBAK,IAEAA,EAAMC,UACN,MAAM,KAAErC,EAAI,MAAEsC,GAAUF,EAAMG,OAC9BL,GAAcM,IAAS,IAClBA,EACHpC,OAAQ,IACHoC,EAAUpC,OACb,CAACJ,GAAOsC,GAEVjC,OAAQ,IACHmC,EAAUnC,OACb,CAACL,GAAO,OAET,EAKHgC,aAtCmBS,UACrBL,EAAMM,iBACN,MAAMtC,EAAS6B,EAAU7B,OACnBC,EAASF,EAASC,GAGxB,GAFA8B,GAAcM,IAAS,IAAWA,EAAWnC,aAEzCsC,OAAOvC,OAAOC,GAAQuC,OAAOC,GAAoB,KAAVA,IAAe,CACxD,MAAMC,EAAa,2GAA2GC,mBAAmB3C,EAAOJ,kBAAkB+C,mBAAmB3C,EAAOH,qBAAqB8C,mBAAmB3C,EAAOF,WAEnP8C,OAAOC,SAASC,KAAOJ,EAEvBK,EAAAA,EAAsB,QAAE,CACtBjD,QAAS,UACTkD,YAAa,sCAEjB,GAwBEhD,OAAQ6B,EAAU7B,OAClBC,OAAQ4B,EAAU5B,OACnB,EStDsDgD,CAAQlD,GAEzDmD,EAAiBC,IAAoC,IAAnC,KAAEC,GAA2BD,EACnD,MAAME,EAAepD,EAAOmD,GAC5B,OAAOtC,EAAAA,EAAAA,KAACW,EAAI,CAAAZ,SAAEwC,GAAoB,EAGpC,OACEvC,EAAAA,EAAAA,KAACS,EAAgB,CAACD,GAAIA,EAAGT,UACvBD,EAAAA,EAAAA,MAAC0C,EAAAA,EAAG,CAACC,QAAQ,gBAAgBC,MAAM,SAAQ3C,SAAA,EACzCC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGhD,UAClCC,EAAAA,EAAAA,KAACgD,EAAAA,GAAK,CAACC,UAAU,OAAOC,aAAW,EAAAnD,UACjCC,EAAAA,EAAAA,KAACmD,EAAK,CAACxD,MAAOA,EAAOC,QAASA,SAGlCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGhD,UAClCC,EAAAA,EAAAA,KAACgD,EAAAA,GAAK,CAACC,UAAU,QAAQC,aAAW,EAAAnD,UAClCD,EAAAA,EAAAA,MAACY,EAAS,CAAC0C,aAAa,MAAMC,SAAUvC,EAAaf,SAAA,EACnDD,EAAAA,EAAAA,MAAC6C,EAAAA,EAAG,CAACW,KAAM,GAAGvD,SAAA,EACZC,EAAAA,EAAAA,KAACuD,EAAK,CACJjB,KAAK,OACLxD,KAAK,OACLuB,YAAY,YACZe,MAAOlC,EAAOJ,MAAQ,GACtBwB,SAAUO,KAEZb,EAAAA,EAAAA,KAACoC,EAAc,CAACE,KAAK,aAEvBxC,EAAAA,EAAAA,MAAC6C,EAAAA,EAAG,CAACW,KAAM,GAAGvD,SAAA,EACZC,EAAAA,EAAAA,KAACuD,EAAK,CACJjB,KAAK,OACLxD,KAAK,QACLuB,YAAY,aACZe,MAAOlC,EAAOH,OAAS,GACvBuB,SAAUO,KAEZb,EAAAA,EAAAA,KAACoC,EAAc,CAACE,KAAK,cAEvBxC,EAAAA,EAAAA,MAAC6C,EAAAA,EAAG,CAACW,KAAM,GAAGvD,SAAA,EACZC,EAAAA,EAAAA,KAACwD,EAAQ,CACPnD,YAAY,eACZe,MAAOlC,EAAOF,SAAW,GACzBF,KAAK,UACLwB,SAAUO,KAEZb,EAAAA,EAAAA,KAACoC,EAAc,CAACE,KAAK,gBAEvBtC,EAAAA,EAAAA,KAACY,EAAe,CAAAb,UACdC,EAAAA,EAAAA,KAACyD,EAAAA,EAAM,CAAC3E,KAAK,SAAQiB,SAAEF,EAAE,yBAMlB,G","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n  const values = formState.values;\r\n  const errors = validate(values);\r\n  setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n  if (Object.values(errors).every((error) => error === \"\")) {\r\n    const mailtoLink = `mailto:Rwaldrop86@gmail.com?subject=Waldrop's IT Tech Solutions New Contact Form Submission &body=Name: ${encodeURIComponent(values.name)}%0AEmail: ${encodeURIComponent(values.email)}%0AMessage: ${encodeURIComponent(values.message)}`;\r\n\r\n    window.location.href = mailtoLink; // Opens the user's default email app with pre-filled details\r\n\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your email client has been opened!\",\r\n    });\r\n  }\r\n};\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","handleChange","handleSubmit","formState","setFormState","useState","event","persist","value","target","prevState","async","preventDefault","Object","every","error","mailtoLink","encodeURIComponent","window","location","href","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}